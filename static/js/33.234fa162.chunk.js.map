{"version":3,"file":"static/js/33.234fa162.chunk.js","mappings":"gRAOaA,GANYC,EAAAA,GAAAA,IAAUC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,uEAMZF,EAAAA,GAAAA,QAAcG,IAAAA,GAAAD,EAAAA,EAAAA,GAAA,sGAMxBE,EAAQJ,EAAAA,GAAAA,GAASK,IAAAA,GAAAH,EAAAA,EAAAA,GAAA,kGAOjBI,EAAeN,EAAAA,GAAAA,GAASO,IAAAA,GAAAL,EAAAA,EAAAA,GAAA,uDAIxBM,EAAUR,EAAAA,GAAAA,EAAQS,IAAAA,GAAAP,EAAAA,EAAAA,GAAA,wB,2ICtBlBQ,EAAWV,EAAAA,GAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,8DAIpBS,EAASX,EAAAA,GAAAA,OAAaG,IAAAA,GAAAD,EAAAA,EAAAA,GAAA,iP,mBCenC,EAjBoB,SAAHU,GAA8B,IAAxBC,EAAED,EAAFC,GAAIC,EAAIF,EAAJE,KAAMC,EAAMH,EAANG,OACzBC,GAAWC,EAAAA,EAAAA,MAKjB,OACEC,EAAAA,EAAAA,MAACR,EAAQ,CAAAS,SAAA,EACPD,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CACGL,EAAK,KAAGC,MAEXK,EAAAA,EAAAA,KAACT,EAAM,CAACU,KAAK,SAASC,QARJ,WACpBN,GAASO,EAAAA,EAAAA,IAAcV,GACzB,EAMiDM,SAAC,aAKpD,EClBaK,EAAOxB,EAAAA,GAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,qE,UCAhBuB,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASA,QAAS,EAElDC,EAAyB,SAAAF,GAAK,OAAIA,EAAMG,OAAQ,EAEhDC,EAAkB,SAAAJ,GAAK,OAAIA,EAAMC,SAASI,SAAU,EACpDC,EAAc,SAAAN,GAAK,OAAIA,EAAMC,SAASM,KAAM,EAE5CC,GAAwBC,EAAAA,EAAAA,IACnC,CAACV,EAAgBG,IAEjB,SAACD,EAAUE,GACT,IAAMO,EAAgBP,EAAQQ,cAAcC,OAC5C,OAAOX,EAASY,QAAO,SAAAC,GAAO,OAC5BA,EAAQ1B,KAAKuB,cAAcI,SAASL,EAAc,GAEtD,I,UCHWM,EAAc,WACzB,IAAMC,GAAkBC,EAAAA,EAAAA,IAAYV,GAG9BD,GAAQW,EAAAA,EAAAA,IAAYZ,GACpBhB,GAAWC,EAAAA,EAAAA,MAIjB,OAHA4B,EAAAA,EAAAA,YAAU,WACR7B,GAAS8B,EAAAA,EAAAA,MACX,GAAG,CAAC9B,KAEFE,EAAAA,EAAAA,MAAA6B,EAAAA,SAAA,CAAA5B,SAAA,GAGmB,OAAfwB,QAAe,IAAfA,GAAAA,EAAiBK,UAAWf,IAE5Bb,EAAAA,EAAAA,KAACZ,EAAAA,GAAO,CAAAW,SAAC,6EAKXC,EAAAA,EAAAA,KAACI,EAAI,CAAAL,SACFwB,EAAgBM,KAAI,SAAArC,GAAuB,IAApBe,EAAQf,EAARe,SAAUd,EAAED,EAAFC,GAChC,OAAOO,EAAAA,EAAAA,KAAC8B,GAAWC,EAAAA,EAAAA,GAAA,GAAcxB,GAARd,EAC3B,QAIR,E,oBClCauC,EAAYpD,EAAAA,GAAAA,MAAYC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,0CAIxBmD,GAAQrD,EAAAA,EAAAA,IAAOsD,EAAAA,GAAPtD,CAAmBG,IAAAA,GAAAD,EAAAA,EAAAA,GAAA,2BAG3BqD,GAAevD,EAAAA,EAAAA,IAAOwD,EAAAA,GAAPxD,CAAmBK,IAAAA,GAAAH,EAAAA,EAAAA,GAAA,6CAIlCuD,GAAOzD,EAAAA,EAAAA,IAAO0D,EAAAA,GAAP1D,CAAkBO,IAAAA,GAAAL,EAAAA,EAAAA,GAAA,0C,mBCThCyD,EAAaC,EAAAA,KAAaC,MAAM,CACpC/C,KAAM8C,EAAAA,KAAaE,SAAS,oBAC5B/C,OAAQ6C,EAAAA,KAAaE,SAAS,wBAqDhC,EAlDoB,WAClB,IAAMnC,GAAWiB,EAAAA,EAAAA,IAAYnB,GACvBT,GAAWC,EAAAA,EAAAA,MAoBjB,OACEG,EAAAA,EAAAA,KAAC2C,EAAAA,GAAM,CACLC,cAAe,CACblD,KAAM,GACNC,OAAQ,IAEVkD,iBAAkBN,EAClBO,SAzBiB,SAACC,EAAMvD,GAAqB,IAAjBwD,EAASxD,EAATwD,UACtBtD,EAAiBqD,EAAjBrD,KAAMC,EAAWoD,EAAXpD,OAEd,GACEY,EAAS0C,MACP,SAAA7B,GAAO,OACLA,EAAQ1B,KAAKuB,cAAcC,SAAWxB,EAAKuB,cAAcC,MAAM,IAKnE,OAFA8B,SACAE,IAAAA,OAAAA,QAAwB,GAADC,OAAIzD,EAAI,6BAIjCE,GAASwD,EAAAA,EAAAA,IAAW,CAAE1D,KAAAA,EAAMC,OAAAA,KAC5BqD,GACF,EAS2BjD,UAEvBD,EAAAA,EAAAA,MAACuC,EAAI,CAAAtC,SAAA,EACHD,EAAAA,EAAAA,MAACkC,EAAS,CAAAjC,SAAA,CAAC,QAETC,EAAAA,EAAAA,KAACiC,EAAK,CAACvC,KAAK,OAAOO,KAAK,OAAOoD,YAAY,kBAC3CrD,EAAAA,EAAAA,KAACmC,EAAY,CAACzC,KAAK,OAAO4D,UAAU,aAGtCxD,EAAAA,EAAAA,MAACkC,EAAS,CAAAjC,SAAA,CAAC,UAETC,EAAAA,EAAAA,KAACiC,EAAK,CAACvC,KAAK,SAASO,KAAK,MAAMoD,YAAY,0BAC5CrD,EAAAA,EAAAA,KAACmC,EAAY,CAACzC,KAAK,SAAS4D,UAAU,aAGxCtD,EAAAA,EAAAA,KAAA,UAAQC,KAAK,SAAQF,SAAC,oBAI9B,E,UC7DawD,EAAQ3E,EAAAA,GAAAA,MAAYC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,uFAMpB0E,EAAQ5E,EAAAA,GAAAA,MAAYG,IAAAA,GAAAD,EAAAA,EAAAA,GAAA,2B,UCmBjC,EArBe,WACb,IAAMc,GAAWC,EAAAA,EAAAA,MACX4D,GAAcjC,EAAAA,EAAAA,IAAYhB,GAOhC,OACEV,EAAAA,EAAAA,MAACyD,EAAK,CAAAxD,SAAA,CAAC,yBAELC,EAAAA,EAAAA,KAACwD,EAAK,CACJ9D,KAAK,SACLO,KAAK,OACLyD,MAAOD,EACPE,SAZiB,SAAAC,GACrBA,EAAEC,iBACFjE,GAASkE,EAAAA,EAAAA,GAAUF,EAAEG,OAAOL,OAC9B,MAaF,ECSA,EAxBqB,WACnB,IAAM9D,GAAWC,EAAAA,EAAAA,MACXc,GAAYa,EAAAA,EAAAA,IAAYd,GACxBG,GAAQW,EAAAA,EAAAA,IAAYZ,GAI1B,OAHAa,EAAAA,EAAAA,YAAU,WACR7B,GAAS8B,EAAAA,EAAAA,MACX,GAAG,CAAC9B,KAEFE,EAAAA,EAAAA,MAAA6B,EAAAA,SAAA,CAAA5B,SAAA,EACED,EAAAA,EAAAA,MAACnB,EAAAA,GAAO,CAAAoB,SAAA,EACNC,EAAAA,EAAAA,KAACd,EAAAA,GAAY,CAAAa,SAAC,iBACdC,EAAAA,EAAAA,KAACgE,EAAW,QAEdlE,EAAAA,EAAAA,MAACnB,EAAAA,GAAO,CAAAoB,SAAA,EACNC,EAAAA,EAAAA,KAACd,EAAAA,GAAY,CAAAa,SAAC,cAEdC,EAAAA,EAAAA,KAACiE,EAAM,IACNtD,IAAcE,IAASb,EAAAA,EAAAA,KAACkE,EAAAA,EAAM,KAE/BlE,EAAAA,EAAAA,KAACsB,EAAW,SAIpB,C","sources":["components/App.styled.js","components/ListItem/ListItem.styled.js","components/ListItem/ListItem.js","components/ContactList/ContactList.styled.js","redux/contacts/selectors.js","components/ContactList/ContactList.js","components/Form/Form.styled.js","components/Form/Form.js","components/Filter/Filter.styled.js","components/Filter/Filter.js","pages/ContactsPage.js"],"sourcesContent":["import styled from 'styled-components';\nexport const Container = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const Section = styled.section`\n  display: flex;\n  flex-direction: column;\n  align-content: center;\n  flex-wrap: wrap;\n`;\nexport const Title = styled.h1`\n  font-size: 30px;\n  display: flex;\n  justify-content: center;\n  margin-top: 100px;\n`;\n\nexport const SectionTitle = styled.h2`\n  margin-bottom: 15px;\n  margin-top: 25px;\n`;\nexport const Message = styled.p`\n  color: red;\n`;\n","import styled from 'styled-components';\n\nexport const ListItem = styled.li`\n  display: flex;\n  justify-content: space-around;\n`;\nexport const Button = styled.button`\n  width: 90px;\n  padding: 5px;\n  &:hover,\n  &:focus {\n    color: white;\n    background-color: darkgrey;\n    box-shadow: 5px 5px 5px 0px #000000, inset 4px 4px 15px 0px #000000,\n      5px 5px 15px 5px rgba(0, 0, 0, 0);\n  }\n`;\n","import { useDispatch } from 'react-redux';\nimport { ListItem, Button } from './ListItem.styled';\nimport { deleteContact } from '../../redux/contacts/operations';\n\nconst ContactItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n\n  const removeContact = () => {\n    dispatch(deleteContact(id));\n  };\n  return (\n    <ListItem>\n      <p>\n        {name}: {number}\n      </p>\n      <Button type=\"button\" onClick={removeContact}>\n        Delete\n      </Button>\n    </ListItem>\n  );\n};\nexport default ContactItem;\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n`;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.contacts;\n\nexport const selectFilteredContacts = state => state.filters;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilteredContacts],\n\n  (contacts, filters) => {\n    const filterLowCase = filters.toLowerCase().trim();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filterLowCase)\n    );\n  }\n);\n","import ContactItem from 'components/ListItem/ListItem';\nimport { List } from './ContactList.styled';\nimport {\n  // selectContacts,\n  selectError,\n  // selectIsLoading,\n  selectVisibleContacts,\n} from '../../redux/contacts/selectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContacts } from '../../redux/contacts/operations';\n// import { Loader } from 'components/Loader';\nimport { Message } from 'components/App.styled';\n\nexport const ContactList = () => {\n  const visibleContacts = useSelector(selectVisibleContacts);\n  // const contacts = useSelector(selectContacts);\n  // const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  return (\n    <>\n      {/* {isLoading && contacts?.length === 0 && <Loader />} */}\n      {/* {error && !isLoading && <div>Something went wrong ...</div>} */}\n      {!visibleContacts?.length && !error && (\n        // !isLoading\n        <Message>\n          There are no contacts in your phonebook. Please add your first\n          contact!\n        </Message>\n      )}\n      <List>\n        {visibleContacts.map(({ contacts, id }) => {\n          return <ContactItem key={id} {...contacts} />;\n        })}\n      </List>\n    </>\n  );\n};\n","import styled from 'styled-components';\nimport {\n  Form as FormikForm,\n  Field as FormikField,\n  ErrorMessage as FormikError,\n} from 'formik';\n\nexport const FormGroup = styled.label`\n  display: flex;\n  gap: 10px;\n`;\nexport const Field = styled(FormikField)`\n  padding: 4px;\n`;\nexport const ErrorMessage = styled(FormikError)`\n  font-size: 16px;\n  color: red;\n`;\nexport const Form = styled(FormikForm)`\n  display: flex;\n  gap: 10px;\n`;\n","import { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { Form, Field, FormGroup, ErrorMessage } from './Form.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from '../../redux/contacts/selectors';\n\nimport { addContact } from '../../redux/contacts/operations';\nimport Notiflix from 'notiflix';\n\nconst FormSchema = Yup.object().shape({\n  name: Yup.string().required('Name is required'),\n  number: Yup.string().required('Number is required'),\n});\n\nconst ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, { resetForm }) => {\n    const { name, number } = values;\n\n    if (\n      contacts.find(\n        contact =>\n          contact.name.toLowerCase().trim() === name.toLowerCase().trim()\n      )\n    ) {\n      resetForm();\n      Notiflix.Notify.failure(`${name} is already in contacts!`);\n      return;\n    }\n\n    dispatch(addContact({ name, number }));\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      validationSchema={FormSchema}\n      onSubmit={handleSubmit}\n    >\n      <Form>\n        <FormGroup>\n          Name\n          <Field name=\"name\" type=\"text\" placeholder=\"Enter a name\" />\n          <ErrorMessage name=\"name\" component=\"span\" />\n        </FormGroup>\n\n        <FormGroup>\n          Number\n          <Field name=\"number\" type=\"tel\" placeholder=\"Enter a phone-number\" />\n          <ErrorMessage name=\"number\" component=\"span\" />\n        </FormGroup>\n\n        <button type=\"submit\">Add contact</button>\n      </Form>\n    </Formik>\n  );\n};\n\nexport default ContactForm;\n","import styled from 'styled-components';\nexport const Label = styled.label`\n  display: flex;\n  gap: 10px;\n  margin-top: 25px;\n  margin-bottom: 25px;\n`;\nexport const Input = styled.input`\n  padding: 4px;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { Label, Input } from './Filter.styled';\nimport { selectFilteredContacts } from '../../redux/contacts/selectors';\nimport { setFilter } from '../../redux/contacts/filtersSlice';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filterValue = useSelector(selectFilteredContacts);\n\n  const handleOnChange = e => {\n    e.preventDefault();\n    dispatch(setFilter(e.target.value));\n  };\n\n  return (\n    <Label>\n      Find contacts by name\n      <Input\n        name=\"filter\"\n        type=\"text\"\n        value={filterValue}\n        onChange={handleOnChange}\n      ></Input>\n    </Label>\n  );\n};\nexport default Filter;\n","import { Section, SectionTitle } from 'components/App.styled';\nimport { ContactList } from '../components/ContactList/ContactList';\nimport ContactForm from 'components/Form/Form';\nimport { Loader } from 'components/Loader';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from '../redux/contacts/operations';\nimport { selectError, selectIsLoading } from '../redux/contacts/selectors';\nimport Filter from 'components/Filter/Filter';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  return (\n    <>\n      <Section>\n        <SectionTitle>Add contact</SectionTitle>\n        <ContactForm />\n      </Section>\n      <Section>\n        <SectionTitle>Contacts</SectionTitle>\n\n        <Filter />\n        {isLoading && !error && <Loader />}\n\n        <ContactList />\n      </Section>\n    </>\n  );\n};\nexport default ContactsPage;\n"],"names":["Section","styled","_templateObject","_taggedTemplateLiteral","_templateObject2","Title","_templateObject3","SectionTitle","_templateObject4","Message","_templateObject5","ListItem","Button","_ref","id","name","number","dispatch","useDispatch","_jsxs","children","_jsx","type","onClick","deleteContact","List","selectContacts","state","contacts","selectFilteredContacts","filters","selectIsLoading","isLoading","selectError","error","selectVisibleContacts","createSelector","filterLowCase","toLowerCase","trim","filter","contact","includes","ContactList","visibleContacts","useSelector","useEffect","fetchContacts","_Fragment","length","map","ContactItem","_objectSpread","FormGroup","Field","FormikField","ErrorMessage","FormikError","Form","FormikForm","FormSchema","Yup","shape","required","Formik","initialValues","validationSchema","onSubmit","values","resetForm","find","Notiflix","concat","addContact","placeholder","component","Label","Input","filterValue","value","onChange","e","preventDefault","setFilter","target","ContactForm","Filter","Loader"],"sourceRoot":""}