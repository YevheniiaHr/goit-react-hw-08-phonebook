{"version":3,"file":"static/js/33.ad682219.chunk.js","mappings":"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","sources":["components/ListItem/ListItem.styled.js","components/ListItem/ListItem.js","components/ContactList/ContactList.styled.js","redux/contacts/selectors.js","components/ContactList/ContactList.js","components/Form/Form.styled.js","components/Form/Form.js","components/Filter/Filter.styled.js","components/Filter/Filter.js","pages/ContactsPage.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ListItem = styled.li`\n  display: flex;\n  align-items: center;\n`;\nexport const Button = styled.button`\n  margin-left: 20px;\n`;\nexport const ListItemPar = styled.p`\n  font-size: 18px;\n  font-weight: 500;\n`;\n","import { useDispatch } from 'react-redux';\nimport { ListItem, Button, ListItemPar } from './ListItem.styled';\nimport { deleteContact } from '../../redux/contacts/operations';\n\nconst ContactItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n\n  const removeContact = () => {\n    dispatch(deleteContact(id));\n  };\n  return (\n    <ListItem>\n      <ListItemPar>\n        {name} : {number}\n      </ListItemPar>\n      <Button type=\"button\" onClick={removeContact}>\n        Delete\n      </Button>\n    </ListItem>\n  );\n};\nexport default ContactItem;\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n`;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.contacts;\n\nexport const selectFilteredContacts = state => state.filters;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilteredContacts],\n\n  (contacts, filters) => {\n    const filterLowCase = filters.toLowerCase().trim();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filterLowCase)\n    );\n  }\n);\n","import ContactItem from 'components/ListItem/ListItem';\nimport { List } from './ContactList.styled';\nimport {\n  selectError,\n  selectVisibleContacts,\n} from '../../redux/contacts/selectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContacts } from '../../redux/contacts/operations';\n\nimport { Message } from 'components/App.styled';\n\nexport const ContactList = () => {\n  const visibleContacts = useSelector(selectVisibleContacts);\n  const error = useSelector(selectError);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  return (\n    <>\n      {!visibleContacts?.length && !error && (\n        <Message>\n          There are no contacts in your phonebook. Please add your first\n          contact!\n        </Message>\n      )}\n      <List>\n        {visibleContacts.map(({ id, name, number }) => {\n          return <ContactItem key={id} id={id} name={name} number={number} />;\n        })}\n      </List>\n    </>\n  );\n};\n","import styled from 'styled-components';\nimport {\n  Form as FormikForm,\n  Field as FormikField,\n  ErrorMessage as FormikError,\n} from 'formik';\n\nexport const FormGroup = styled.label`\n  display: flex;\n  align-items: baseline;\n  justify-content: flex-end;\n  gap: 10px;\n`;\nexport const Field = styled(FormikField)`\n  padding: 4px;\n`;\nexport const ErrorMessage = styled(FormikError)`\n  font-size: 16px;\n  color: red;\n`;\nexport const Form = styled(FormikForm)`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n`;\n","import { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { Form, Field, FormGroup, ErrorMessage } from './Form.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from '../../redux/contacts/selectors';\n\nimport { addContact } from '../../redux/contacts/operations';\nimport Notiflix from 'notiflix';\n\nconst FormSchema = Yup.object().shape({\n  name: Yup.string().required('Name is required'),\n  number: Yup.string().required('Number is required'),\n});\n\nconst ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, { resetForm }) => {\n    const { name, number } = values;\n\n    if (\n      contacts.find(\n        contact =>\n          contact.name.toLowerCase().trim() === name.toLowerCase().trim()\n      )\n    ) {\n      resetForm();\n      Notiflix.Notify.failure(`${name} is already in contacts!`);\n      return;\n    }\n\n    dispatch(addContact({ name, number }));\n    Notiflix.Notify.success(\n      `Contact with name ${name} has been added successfully to contacts list.`\n    );\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      validationSchema={FormSchema}\n      onSubmit={handleSubmit}\n    >\n      <Form>\n        <FormGroup>\n          <h3>Name</h3>\n          <Field\n            name=\"name\"\n            type=\"text\"\n            placeholder=\"Enter a name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          />\n          <ErrorMessage name=\"name\" component=\"span\" />\n        </FormGroup>\n\n        <FormGroup>\n          <h3>Number</h3>\n          <Field\n            name=\"number\"\n            type=\"tel\"\n            placeholder=\"Enter a phone-number\"\n            pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n          />\n          <ErrorMessage name=\"number\" component=\"span\" />\n        </FormGroup>\n\n        <button type=\"submit\">Add contact</button>\n      </Form>\n    </Formik>\n  );\n};\n\nexport default ContactForm;\n","import styled from 'styled-components';\nexport const Label = styled.label`\n  display: flex;\n  gap: 10px;\n  // margin-top: 25px;\n  margin-bottom: 25px;\n`;\nexport const Input = styled.input`\n  padding: 4px;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { Label, Input } from './Filter.styled';\nimport { selectFilteredContacts } from '../../redux/contacts/selectors';\nimport { setFilter } from '../../redux/contacts/filtersSlice';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filterValue = useSelector(selectFilteredContacts);\n\n  const handleOnChange = e => {\n    e.preventDefault();\n    dispatch(setFilter(e.target.value));\n  };\n\n  return (\n    <Label>\n      <h3>Find contacts by name</h3>\n      <Input\n        name=\"filter\"\n        type=\"text\"\n        value={filterValue}\n        onChange={handleOnChange}\n      ></Input>\n    </Label>\n  );\n};\nexport default Filter;\n","import { Section, SectionTitle } from 'components/App.styled';\nimport { ContactList } from '../components/ContactList/ContactList';\nimport ContactForm from 'components/Form/Form';\nimport { Loader } from 'components/Loader';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from '../redux/contacts/operations';\nimport { selectError, selectIsLoading } from '../redux/contacts/selectors';\nimport Filter from 'components/Filter/Filter';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  return (\n    <>\n      <Section>\n        <SectionTitle>Add contact</SectionTitle>\n        <ContactForm />\n      </Section>\n      <Section>\n        <SectionTitle>Contacts</SectionTitle>\n\n        <Filter />\n        {isLoading && !error && <Loader />}\n\n        <ContactList />\n      </Section>\n    </>\n  );\n};\nexport default ContactsPage;\n"],"names":["ListItem","styled","_templateObject","_taggedTemplateLiteral","Button","_templateObject2","ListItemPar","_templateObject3","_ref","id","name","number","dispatch","useDispatch","_jsxs","children","_jsx","type","onClick","deleteContact","List","selectContacts","state","contacts","selectFilteredContacts","filters","selectIsLoading","isLoading","selectError","error","selectVisibleContacts","createSelector","filterLowCase","toLowerCase","trim","filter","contact","includes","ContactList","visibleContacts","useSelector","useEffect","fetchContacts","_Fragment","length","Message","map","ContactItem","FormGroup","Field","FormikField","ErrorMessage","FormikError","Form","FormikForm","_templateObject4","FormSchema","Yup","shape","required","Formik","initialValues","validationSchema","onSubmit","values","resetForm","find","Notiflix","concat","addContact","placeholder","pattern","component","Label","Input","filterValue","value","onChange","e","preventDefault","setFilter","target","Section","SectionTitle","ContactForm","Filter","Loader"],"sourceRoot":""}