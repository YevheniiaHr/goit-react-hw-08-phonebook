{"version":3,"file":"static/js/186.891287e8.chunk.js","mappings":"0NAOaA,EAAYC,EAAAA,GAAAA,MAAYC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,0CAIxBC,GAAQH,EAAAA,EAAAA,IAAOI,EAAAA,GAAPJ,CAAmBK,IAAAA,GAAAH,EAAAA,EAAAA,GAAA,2BAG3BI,GAAeN,EAAAA,EAAAA,IAAOO,EAAAA,GAAPP,CAAmBQ,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,6CAIlCO,GAAOT,EAAAA,EAAAA,IAAOU,EAAAA,GAAPV,CAAkBW,IAAAA,GAAAT,EAAAA,EAAAA,GAAA,0C,0DCThCU,EAAaC,EAAAA,KAAaC,MAAM,CACpCC,KAAMF,EAAAA,KAAaG,SAAS,oBAC5BC,OAAQJ,EAAAA,KAAaG,SAAS,wBAqDhC,EAlDoB,WAClB,IAAME,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,IACvBC,GAAWC,EAAAA,EAAAA,MAoBjB,OACEC,EAAAA,EAAAA,KAACC,EAAAA,GAAM,CACLC,cAAe,CACbV,KAAM,GACNE,OAAQ,IAEVS,iBAAkBd,EAClBe,SAzBiB,SAACC,EAAMC,GAAqB,IAAjBC,EAASD,EAATC,UACtBf,EAAiBa,EAAjBb,KAAME,EAAWW,EAAXX,OAEd,GACEC,EAASa,MACP,SAAAC,GAAO,OACLA,EAAQjB,KAAKkB,cAAcC,SAAWnB,EAAKkB,cAAcC,MAAM,IAKnE,OAFAJ,SACAK,IAAAA,OAAAA,QAAwB,GAADC,OAAIrB,EAAI,6BAIjCM,GAASgB,EAAAA,EAAAA,IAAW,CAAEtB,KAAAA,EAAME,OAAAA,KAC5Ba,GACF,EAS2BQ,UAEvBC,EAAAA,EAAAA,MAAC9B,EAAI,CAAA6B,SAAA,EACHC,EAAAA,EAAAA,MAACxC,EAAS,CAAAuC,SAAA,CAAC,QAETf,EAAAA,EAAAA,KAACpB,EAAK,CAACY,KAAK,OAAOyB,KAAK,OAAOC,YAAY,kBAC3ClB,EAAAA,EAAAA,KAACjB,EAAY,CAACS,KAAK,OAAO2B,UAAU,aAGtCH,EAAAA,EAAAA,MAACxC,EAAS,CAAAuC,SAAA,CAAC,UAETf,EAAAA,EAAAA,KAACpB,EAAK,CAACY,KAAK,SAASyB,KAAK,MAAMC,YAAY,0BAC5ClB,EAAAA,EAAAA,KAACjB,EAAY,CAACS,KAAK,SAAS2B,UAAU,aAGxCnB,EAAAA,EAAAA,KAAA,UAAQiB,KAAK,SAAQF,SAAC,oBAI9B,C,gGC5DaK,EAAe,WAC1B,OACEpB,EAAAA,EAAAA,KAAA,OAAAe,UACEf,EAAAA,EAAAA,KAACqB,EAAAA,EAAW,KAGlB,C,8ICNaxB,EAAiB,SAAAyB,GAAK,OAAIA,EAAM3B,SAASA,QAAS,EAIlD4B,EAAkB,SAAAD,GAAK,OAAIA,EAAM3B,SAAS6B,SAAU,EACpDC,EAAc,SAAAH,GAAK,OAAIA,EAAM3B,SAAS+B,KAAM,EAE5CC,GAAwBC,EAAAA,EAAAA,IACnC,CAAC/B,EANmC,SAAAyB,GAAK,OAAIA,EAAMO,OAAQ,IAQ3D,SAAClC,EAAUkC,GACT,IAAMC,EAAgBD,EAAQnB,cAAcC,OAC5C,OAAOhB,EAASoC,QAAO,SAAAtB,GAAO,OAC5BA,EAAQjB,KAAKkB,cAAcsB,SAASF,EAAc,GAEtD,G","sources":["components/Form/Form.styled.js","components/Form/Form.js","pages/RegistrationPage.js","redux/contacts/selectors.js"],"sourcesContent":["import styled from 'styled-components';\nimport {\n  Form as FormikForm,\n  Field as FormikField,\n  ErrorMessage as FormikError,\n} from 'formik';\n\nexport const FormGroup = styled.label`\n  display: flex;\n  gap: 10px;\n`;\nexport const Field = styled(FormikField)`\n  padding: 4px;\n`;\nexport const ErrorMessage = styled(FormikError)`\n  font-size: 16px;\n  color: red;\n`;\nexport const Form = styled(FormikForm)`\n  display: flex;\n  gap: 10px;\n`;\n","import { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { Form, Field, FormGroup, ErrorMessage } from './Form.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from '../../redux/contacts/selectors';\n\nimport { addContact } from '../../redux/contacts/operations';\nimport Notiflix from 'notiflix';\n\nconst FormSchema = Yup.object().shape({\n  name: Yup.string().required('Name is required'),\n  number: Yup.string().required('Number is required'),\n});\n\nconst ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = (values, { resetForm }) => {\n    const { name, number } = values;\n\n    if (\n      contacts.find(\n        contact =>\n          contact.name.toLowerCase().trim() === name.toLowerCase().trim()\n      )\n    ) {\n      resetForm();\n      Notiflix.Notify.failure(`${name} is already in contacts!`);\n      return;\n    }\n\n    dispatch(addContact({ name, number }));\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      validationSchema={FormSchema}\n      onSubmit={handleSubmit}\n    >\n      <Form>\n        <FormGroup>\n          Name\n          <Field name=\"name\" type=\"text\" placeholder=\"Enter a name\" />\n          <ErrorMessage name=\"name\" component=\"span\" />\n        </FormGroup>\n\n        <FormGroup>\n          Number\n          <Field name=\"number\" type=\"tel\" placeholder=\"Enter a phone-number\" />\n          <ErrorMessage name=\"number\" component=\"span\" />\n        </FormGroup>\n\n        <button type=\"submit\">Add contact</button>\n      </Form>\n    </Formik>\n  );\n};\n\nexport default ContactForm;\n","import ContactForm from 'components/Form/Form';\n\nexport const Registration = () => {\n  return (\n    <div>\n      <ContactForm />\n    </div>\n  );\n};\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.contacts;\n\nexport const selectFilteredContacts = state => state.filters;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilteredContacts],\n\n  (contacts, filters) => {\n    const filterLowCase = filters.toLowerCase().trim();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filterLowCase)\n    );\n  }\n);\n"],"names":["FormGroup","styled","_templateObject","_taggedTemplateLiteral","Field","FormikField","_templateObject2","ErrorMessage","FormikError","_templateObject3","Form","FormikForm","_templateObject4","FormSchema","Yup","shape","name","required","number","contacts","useSelector","selectContacts","dispatch","useDispatch","_jsx","Formik","initialValues","validationSchema","onSubmit","values","_ref","resetForm","find","contact","toLowerCase","trim","Notiflix","concat","addContact","children","_jsxs","type","placeholder","component","Registration","ContactForm","state","selectIsLoading","isLoading","selectError","error","selectVisibleContacts","createSelector","filters","filterLowCase","filter","includes"],"sourceRoot":""}